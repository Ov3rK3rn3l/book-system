const express = require('express');
const router = express.Router();
const mongoose = require("mongoose");
const pagarme = require("../services/pagarme");
const Cliente = require('../models/cliente');
const SalaoCliente = require('../models/relationship/salonCliente');

router.post("/", async (req, res) => {
    const db = mongoose.connection;
    const session = await db.startSession();
    session.startTransaction();

    try {
        const { cliente, salaoId } = req.body;
        let newCliente = null;

        // verificar se o cliente existe...
        const existentCliente = await Cliente.findOne({
            $or: [{ email: cliente.email }, { telefone: cliente.telefone }],
        });
        // se n existe, cadastra!
        if (!existentCliente) {

            const _id = mongoose.Types.ObjectId();
            // criar customer
            const pagarmeCustomer = await pagarme("/customers", {
                external_id: _id,
                name: cliente.nome,
                type: cliente.documento.tipo == 'cpf' ? 'individual' : 'corporation',
                country: cliente.endereco.pais,
                email: cliente.email,
                documents: [
                    {
                        type: cliente.documento.tipo,
                        number: cliente.documento.numero,
                    },
                ],
                phone_numbers: [cliente.telefone],
                birthday: cliente.dataNascimento,
            });

            if (pagarmeCustomer.error) {
                throw pagarmeCustomer;
            }
            //criando CLIENTE
            newCliente = await Cliente({
                ...cliente,
                _id,
                customerId: pagarmeCustomer.data.id,
            }).save({ session });
        }

        // relacionamento

        const clienteId = existentCliente
            ? existentCliente._id
            : newCliente._id;

        // verifica se ja existe o relacionamento com o salao
        const existentRelationship = await SalaoCliente.findOne({
            salaoId,
            clienteId,
            status: { $ne: "E" },
        });

        // se nao existe
        if (!existentRelationship) {
            await new SalaoCliente({
                salaoId,
                clienteId,
            }).save({ session });
        }

        // SE EXISTE O VINCULO ENTRE O cliente E O SALAO
        if (existentCliente) {
            await SalaoCliente.findOneAndUpdate(
                {
                    salaoId,
                    clienteId,
                },
                { status: 'A' },
                { session }
            );
        }

        await session.commitTransaction();
        session.endSession();


        if (existentCliente || existentRelationship) {
            res.json({ error: true, message: 'Cliente j√° cadastrado!'});
        } else {
            res.json({ error: false });
        }

        

    } catch (err) {
        await session.abortTransaction();
        session.endSession();
        res.json({ error: true, message: err.message });
    }
});

module.exports = router;